# Blue-Green Deployment Configuration
# Classification: CRITICAL - ZERO-DOWNTIME DEPLOYMENT
# Advanced deployment strategy with automated rollback capabilities
# Last Updated: 2025-08-08

# Blue-Green Deployment Namespace Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: orchestrix-pilot
  labels:
    deployment-strategy: blue-green
    environment: pilot
    managed-by: deployment-controller
---
# Blue Deployment - Current Production
apiVersion: apps/v1
kind: Deployment
metadata:
  name: episodic-memory-blue
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    version: blue
    color: blue
    deployment-strategy: blue-green
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: episodic-memory
      color: blue
  template:
    metadata:
      labels:
        app: episodic-memory
        version: blue
        color: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
        deployment.kubernetes.io/revision: "1"
    spec:
      serviceAccountName: application-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 2000
      containers:
      - name: episodic-memory
        image: agentic/research-engine:stable
        imagePullPolicy: IfNotPresent
        command: 
        - uvicorn
        - services.episodic_memory.app:app
        - --host=0.0.0.0
        - --port=8081
        - --workers=2
        ports:
        - containerPort: 8081
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: SERVICE_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['version']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_SERVICE_NAME
          value: "episodic-memory-blue"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: application-secrets
              key: redis-url
        - name: WEAVIATE_URL
          value: "http://weaviate:8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: CIRCUIT_BREAKER_FAILURE_THRESHOLD
          value: "3"
        - name: CIRCUIT_BREAKER_RECOVERY_TIMEOUT
          value: "60"
        - name: MAX_RETRIES
          value: "3"
        - name: REQUEST_TIMEOUT
          value: "30"
        envFrom:
        - secretRef:
            name: application-secrets
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - episodic-memory
                - key: color
                  operator: In
                  values:
                  - blue
              topologyKey: kubernetes.io/hostname
---
# Green Deployment - New Version
apiVersion: apps/v1
kind: Deployment
metadata:
  name: episodic-memory-green
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    version: green
    color: green
    deployment-strategy: blue-green
spec:
  replicas: 0  # Initially scaled to 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: episodic-memory
      color: green
  template:
    metadata:
      labels:
        app: episodic-memory
        version: green
        color: green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
        deployment.kubernetes.io/revision: "2"
    spec:
      serviceAccountName: application-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 2000
      containers:
      - name: episodic-memory
        image: agentic/research-engine:latest  # Will be updated during deployment
        imagePullPolicy: Always
        command: 
        - uvicorn
        - services.episodic_memory.app:app
        - --host=0.0.0.0
        - --port=8081
        - --workers=2
        ports:
        - containerPort: 8081
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: SERVICE_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['version']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_SERVICE_NAME
          value: "episodic-memory-green"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: application-secrets
              key: redis-url
        - name: WEAVIATE_URL
          value: "http://weaviate:8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_TRACING
          value: "true"
        - name: ENABLE_METRICS
          value: "true"
        - name: CIRCUIT_BREAKER_FAILURE_THRESHOLD
          value: "3"
        - name: CIRCUIT_BREAKER_RECOVERY_TIMEOUT
          value: "60"
        - name: MAX_RETRIES
          value: "3"
        - name: REQUEST_TIMEOUT
          value: "30"
        envFrom:
        - secretRef:
            name: application-secrets
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - episodic-memory
                - key: color
                  operator: In
                  values:
                  - green
              topologyKey: kubernetes.io/hostname
---
# Active Service (Routes to Current Deployment)
apiVersion: v1
kind: Service
metadata:
  name: episodic-memory
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    service-type: active
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app: episodic-memory
    color: blue  # Initially points to blue deployment
  sessionAffinity: None
---
# Blue Service (Always points to Blue Deployment)
apiVersion: v1
kind: Service
metadata:
  name: episodic-memory-blue
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    color: blue
    service-type: blue
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app: episodic-memory
    color: blue
---
# Green Service (Always points to Green Deployment)
apiVersion: v1
kind: Service
metadata:
  name: episodic-memory-green
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    color: green
    service-type: green
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app: episodic-memory
    color: green
---
# Deployment Controller ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: blue-green-deployment-config
  namespace: orchestrix-pilot
  labels:
    component: deployment-controller
data:
  deployment-strategy: "blue-green"
  active-color: "blue"
  health-check-path: "/health"
  readiness-check-path: "/ready"
  rollback-threshold-error-rate: "0.05"
  rollback-threshold-latency-p95: "2000"
  rollback-threshold-availability: "0.99"
  validation-duration: "300"  # 5 minutes
  traffic-switch-timeout: "60"  # 1 minute
  rollback-timeout: "180"  # 3 minutes
---
# Blue-Green Deployment Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue-green-controller
  namespace: orchestrix-pilot
  labels:
    app: blue-green-controller
    component: deployment-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blue-green-controller
  template:
    metadata:
      labels:
        app: blue-green-controller
        component: deployment-controller
    spec:
      serviceAccountName: deployment-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: controller
        image: agentic/blue-green-controller:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NAMESPACE
          value: "orchestrix-pilot"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: LOG_LEVEL
          value: "INFO"
        - name: CONTROLLER_NAME
          value: "blue-green-controller"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/config
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: blue-green-deployment-config
      - name: tmp
        emptyDir: {}
---
# Service Account for Deployment Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-controller
  namespace: orchestrix-pilot
  labels:
    component: deployment-controller
---
# ClusterRole for Deployment Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployment-controller
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
# ClusterRoleBinding for Deployment Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deployment-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deployment-controller
subjects:
- kind: ServiceAccount
  name: deployment-controller
  namespace: orchestrix-pilot
---
# Prometheus ServiceMonitor for Blue-Green Metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: blue-green-deployment-metrics
  namespace: orchestrix-pilot
  labels:
    app: episodic-memory
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: episodic-memory
  endpoints:
  - port: http
    path: /metrics
    interval: 15s
    scrapeTimeout: 10s
  - port: http
    path: /metrics
    interval: 15s
    scrapeTimeout: 10s
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_label_color]
      targetLabel: deployment_color
---
# Deployment Webhook for Automated Rollback
apiVersion: v1
kind: Service
metadata:
  name: deployment-webhook
  namespace: orchestrix-pilot
  labels:
    app: deployment-webhook
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: webhook
  selector:
    app: deployment-webhook
---
# Horizontal Pod Autoscaler for Blue Deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: episodic-memory-blue-hpa
  namespace: orchestrix-pilot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: episodic-memory-blue
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# Horizontal Pod Autoscaler for Green Deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: episodic-memory-green-hpa
  namespace: orchestrix-pilot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: episodic-memory-green
  minReplicas: 0
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# Network Policy for Blue-Green Deployments
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blue-green-network-policy
  namespace: orchestrix-pilot
spec:
  podSelector:
    matchLabels:
      app: episodic-memory
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    - podSelector:
        matchLabels:
          app: blue-green-controller
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: weaviate
    ports:
    - protocol: TCP
      port: 8080
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: otel-collector
    ports:
    - protocol: TCP
      port: 4317
  - to:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
  - to: []
    ports:
    - protocol: UDP
      port: 53   # DNS
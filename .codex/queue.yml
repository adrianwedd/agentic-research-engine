- acceptance_criteria:
  - something done
  id: CODEX-EXAMPLE-01
  priority: low
  steps:
  - do something
  title: Example task
- acceptance_criteria:
  - Given a recalled plan template exists
  - When a similar query is submitted
  - Then the resulting plan has fewer nodes than the baseline
  id: P3-TEST-01
  notes: '`services/tool_registry/__init__.py` uses `datetime.utcnow()` which is deprecated
    in Python 3.12. Replace with `datetime.now(datetime.UTC)` to ensure timezone-aware
    timestamps.'
  priority: medium
  status: open
  steps:
  - Investigate Supervisor merging logic
  - Add regression test for plan length reduction
  title: Replace deprecated utcnow usage
- acceptance_criteria:
  - RL training uses Ray RLlib and NVIDIA Isaac Lab
  id: CR-006
  priority: medium
  steps: []
  title: Adopt RLlib and Isaac Lab tooling
- acceptance_criteria:
  - docs/change-requests.md aggregates suggestions by topic
  - codex_tasks.md references this issue
  id: CODEX-CR-COLLECT-02
  issue: TBD
  priority: low
  steps: []
  title: Consolidate scattered change-request suggestions
- acceptance_criteria:
  - Overlapping entries are consolidated in codex_tasks.md
  - docs/change-requests.md notes consolidation date
  - Issue link is recorded here
  id: CODEX-CR-RATIONALISE-03
  issue: TBD
  priority: low
  steps: []
  title: Rationalise overlap between change_requests.md and codex_tasks.md
- acceptance_criteria:
  - Gap analysis report produced
  - Task flow diagram with pain points
  - AGENTS.md and codex_tasks updated with examples and new metadata support
  id: CR-AI-16
  priority: medium
  steps:
  - Audit AGENTS.md against runtime behaviors
  - Trace task lifecycle from queue to completion
  - Propose doc updates and logic refinements
  title: Analyse & Enhance Codex Agent Experience
- acceptance_criteria:
  - Given an agent issues any tool call
  - When the call completes or is blocked
  - Then a log entry is emitted with timestamp, agent_id, action, intent, and outcome
  id: CR-05c
  priority: medium
  steps: []
  title: Enable Continuous Monitoring & Auditing
- acceptance_criteria:
  - All @pytest.mark.core tests (including sandbox) pass under the parallel runner.
  - optional and integration tests continue to pass in their respective CI jobs.
  id: CR-05b-04
  priority: low
  steps:
  - Rerun `test_sandbox.py` under the new core suite to confirm sandbox isolation
    and timeouts still work.
  - Execute the 'optional' and 'integration' markers locally and in CI to catch any
    regressions in slow or optional tests.
  - Fix any failures (e.g. missing fixtures, new dependency issues, or timeouts).
  title: Verify sandbox and optional-suite stability post-migration
- acceptance_criteria:
  - Planner queries the reputation API before assigning tasks
  - Weighted sum considers reputation score, token cost and load
  id: CR-04
  priority: medium
  steps:
  - integrate Planner with Reputation Service via GET /v1/reputation/query
  - compute weighted utility using reputation, cost, and current load
  - allocate tasks to maximize utility
  title: Agent Modification - Planner Agent Enhancement
- acceptance_criteria:
  - Edges and nodes styled based on agent-provided confidence scores
  - Agent's primary intended plan visually distinct
  - Selecting a belief node reveals the evidence chain
  id: CR-1.2
  priority: medium
  steps: []
  title: Uncertainty & Intent Display
- acceptance_criteria:
  - A "What-If" mode can be toggled on, creating a non-destructive simulation environment.
  - Within this mode, operators can modify plan parameters and trigger a re-simulation.
  - The UI displays the original and simulated plans side-by-side with updated KPIs.
  - Simulation logs are kept separate from the primary execution logs.
  id: CR-1.3
  priority: medium
  steps: []
  title: What-If Simulation Mode
- acceptance_criteria:
  - All services run under FastAPI with no blocking calls
  - Existing endpoints behave identically
  id: CR-P4-01A
  priority: high
  steps:
  - Replace HTTPServer usage in ToolRegistryServer and LTMServiceServer with FastAPI
    apps
  - Update docker-compose and helm charts to launch uvicorn workers
  title: Complete FastAPI migration for all services
- acceptance_criteria:
  - CI test passes showing cache hit/miss counts
  id: CR-P4-02A
  priority: medium
  steps:
  - Generate enough unique texts to exceed EMBED_CACHE_SIZE
  - Assert cache size is capped and LRU eviction occurs
  title: Add CI smoke test for embedding cache eviction
- acceptance_criteria:
  - monitoring service emits cpu_usage and memory_usage metrics
  id: CR-P4-03A
  priority: high
  steps:
  - Integrate psutil to record process CPU and RSS values
  - Export metrics through OpenTelemetry
  title: Expose CPU and memory metrics via SystemMonitor
- acceptance_criteria:
  - Invalid inputs are logged with timestamp and caller information
  id: CR-P4-04A
  priority: medium
  steps:
  - Update validate_path_or_url to log InputValidationError details
  - Add unit test verifying log output
  title: Log invalid path and URL validation attempts
- acceptance_criteria:
  - Tasks are routed to specialized agents when available
  id: CR-P4-05A
  priority: high
  steps:
  - Store agent skill metadata in ProceduralMemoryService
  - Modify Supervisor to choose the best-matching specialist
  title: Implement specialist agent selection logic
- acceptance_criteria:
  - New tests fail on regression and pass on baseline implementation
  id: CR-P4-06A
  priority: medium
  steps:
  - Add integration tests covering FM-1.3, FM-2.4, and FM-3.3 scenarios
  title: Implement MAST tests for Step Repetition, Information Withholding, and Incorrect
    Verification
- acceptance_criteria:
  - Agents can run parameterized SQL queries through the registry
  id: CR-P4-07A
  priority: medium
  steps:
  - Implement connectors for SQLite and PostgreSQL
  - Register tools with appropriate RBAC rules
  title: Add SQL query tool connectors to Tool Registry
- acceptance_criteria:
  - New document linked from mkdocs navigation
  id: CR-P4-08A
  priority: low
  steps:
  - Summarize proposed data model and API
  - Add research report under docs/research/
  title: Document spatio-temporal memory research findings
- acceptance_criteria:
  - Onboarding guide includes caching configuration section
  id: CR-P4-09A
  priority: low
  steps:
  - Explain EMBED_CACHE_SIZE and caching benefits
  - Reference scripts/agent-setup.sh for environment setup
  title: Update onboarding docs with embedding cache guidance
- acceptance_criteria:
  - Specialist agent receives a tagged task when its specialization score is highest
  - Generalist agent used when no specialist exceeds threshold
  id: CR-P4-07R
  priority: high
  steps: []
  title: Add Neo4j consolidation for semantic memory
- acceptance_criteria:
  - SELECT queries on SQLite return DataFrame results
  - Parameterized queries on Postgres return correct results
  id: CR-P4-17R
  priority: medium
  steps:
  - Implement SqliteQueryTool and PostgresQueryTool classes
  - Register tools in the registry with RBAC roles
  - Add tests spinning up SQLite and Postgres instances
  title: Add Specialized DB Connectors
- acceptance_criteria:
  - MemoryManager stores skills with policy, embedding and metadata
  id: CR-001
  priority: medium
  steps:
  - Design SkillLibrary schema with policy, representation and metadata fields
  - Refactor MemoryManager to use the SkillLibrary for storage and retrieval
  - Implement semantic lookup APIs by embedding or metadata filters
  - Ensure compatibility with episodic and semantic memory modules
  - Add unit tests and update documentation
  title: SkillLibrary-based MemoryManager overhaul
- acceptance_criteria:
  - URL discovers disentangled skills for the SkillLibrary
  id: CR-002
  priority: medium
  steps:
  - Research and select a URL framework focusing on the DUSDi algorithm
  - Integrate environment interface for reward-free exploration
  - Implement mutual-information objective for disentangled skill learning
  - Store discovered skills and metadata in the SkillLibrary
  - Evaluate diversity and disentanglement metrics
  title: Unsupervised SkillDiscoveryModule
- acceptance_criteria:
  - LLM-generated sub-tasks and rewards stored in skill metadata
  id: CR-003
  priority: medium
  steps:
  - Define interface and prompt templates for the LLM to describe sub-tasks
  - Translate LLM output into reward functions and termination conditions
  - Integrate L2S/LDSC framework to generate structured skill specs
  - Persist semantic scaffolding in skill metadata
  - Test with sample tasks and refine prompts
  title: LLM-guided semantic skill decomposition
- acceptance_criteria:
  - Manager selects goals and Worker executes skills via HRL
  id: CR-004
  priority: medium
  steps:
  - Design two-level FuN architecture with Manager and Worker policies
  - Implement goal-conditioned Worker using intrinsic rewards
  - Sequence skills using SkillLibrary embeddings for goal selection
  - Validate integration with MemoryManager and other modules
  - Add integration tests for long-horizon tasks
  title: Hierarchical Policy Executor
- acceptance_criteria:
  - New skills added without overwriting existing ones
  id: CR-005
  priority: medium
  steps:
  - Diversify training environments to learn invariant features
  - Freeze existing skills and modularize SkillLibrary for expansion
  - Compose new skills via Primitive Prompt Learning
  - Continuously evaluate transfer and generalization
  title: Lifelong skill generalization support

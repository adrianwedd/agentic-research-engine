name: CI

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      judge: ${{ steps.filter.outputs.judge }}
      python: ${{ steps.filter.outputs.python }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - 'core/**'
            judge:
              - 'pipelines/judge/**'
              - 'data/golden_judge_dataset/**'
            python:
              - '**/*.py'
              - '**/requirements.txt'

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Setup environment
        run: bash scripts/agent-setup.sh
      - name: Run pre-commit
        run: pre-commit run --all-files
      - name: Check Markdown links
        run: python scripts/link_check.py

  api-spec:
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: pip install fastapi pydantic PyYAML
      - name: Check OpenAPI spec
        run: python scripts/validate_openapi.py

  integration:
    needs: changes
    if: |
      needs.changes.outputs.core == 'true' ||
      needs.changes.outputs.judge == 'true' ||
      needs.changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Setup environment
        run: bash scripts/agent-setup.sh
      - name: Run tests
        id: run-tests
        continue-on-error: true
        run: |
          set -o pipefail
          pytest --cov=./ --cov-report=xml --cov-report=html --cov-fail-under=80 -v | tee tests.log
          echo "exitcode=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
      - name: Upload coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov/
      - name: Upload test log
        uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: tests.log
      - name: Summarize failures
        if: always()
        run: python scripts/ci_summary.py tests.log coverage.xml ci_summary.md
      - name: Upload CI summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci_summary.md
      - name: Check validation errors
        run: python scripts/check_validation_errors.py tests.log
      - name: Fail if tests failed
        if: steps.run-tests.outputs.exitcode != '0'
        run: exit 1
      - name: Check codex queue
        run: python scripts/validate_queue.py


  core:
    needs: changes
    if: needs.changes.outputs.core == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Check AGENTS.md exists
        run: test -f AGENTS.md
      - name: Setup environment
        run: bash scripts/agent-setup.sh
      - name: Run linters
        run: pre-commit run --all-files
      - name: Run tests
        run: bash scripts/run_core_tests.sh


  security-dependencies:
    needs: changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Setup environment
        run: bash scripts/agent-setup.sh
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run pip-audit
        run: |
          mkdir -p security
          pip-audit -r requirements.txt -f json -o security/pip_audit_report.json
      - name: Check vulnerabilities
        run: python scripts/check_pip_audit.py security/pip_audit_report.json
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: security/pip_audit_report.json

  verify-tasks:
    needs: changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Setup environment
        run: bash scripts/agent-setup.sh
      - name: Verify tasks file
        run: python scripts/verify_tasks.py
